"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = __importDefault(require("express"));
const auth_1 = require("../middleware/auth");
const dependencyInjection_1 = require("../dependencyInjection");
const router = express_1.default.Router();
router.post("/adminLogin", dependencyInjection_1.adminController.login);
router.get("/adminHome", (0, auth_1.verifyTokenWithRole)("admin"), dependencyInjection_1.adminController.getDashboardSummary);
router.get("/userList", (0, auth_1.verifyTokenWithRole)("admin"), dependencyInjection_1.adminController.getUserList);
router.post("/disableUser/:id", (0, auth_1.verifyTokenWithRole)("admin"), dependencyInjection_1.adminController.disableUser);
router.get("/stocklist", (0, auth_1.verifyTokenWithRole)("admin"), dependencyInjection_1.adminController.getStockList);
router.get("/orders", (0, auth_1.verifyTokenWithRole)("admin"), dependencyInjection_1.adminController.getAllOrders);
router.get("/limitorders", (0, auth_1.verifyTokenWithRole)("admin"), dependencyInjection_1.adminController.getLimitOrders);
router.get("/marketorders", (0, auth_1.verifyTokenWithRole)("admin"), dependencyInjection_1.adminController.getMarketOrders);
router.get("/matchedorders", dependencyInjection_1.adminController.getMatchedOrders);
router.get("/orderDetails/:orderId", (0, auth_1.verifyTokenWithRole)("admin"), dependencyInjection_1.adminController.getOrderDetails);
router.get("/allTransactions", (0, auth_1.verifyTokenWithRole)("admin"), dependencyInjection_1.adminController.getAllTransactions);
router.get("/userPortfolio/:userId", (0, auth_1.verifyTokenWithRole)("admin"), dependencyInjection_1.adminController.getUserPortfolio);
router.get("/getFees", (0, auth_1.verifyTokenWithRole)("admin"), dependencyInjection_1.adminController.getTotalFeesCollected);
router.post("/changeStatus/:orderId", (0, auth_1.verifyTokenWithRole)("admin"), dependencyInjection_1.adminController.cancelOrder);
router.post("/updateLimit", (0, auth_1.verifyTokenWithRole)("admin"), dependencyInjection_1.adminController.updateLimit);
router.post("/createSession", (0, auth_1.verifyTokenWithRole)("admin"), dependencyInjection_1.adminController.createSession);
router.post("/createPromotions", dependencyInjection_1.adminController.CreatePromotions);
router.get("/limit", (0, auth_1.verifyTokenWithRole)("admin"), dependencyInjection_1.adminController.getLimits);
router.get("/getSessions", (0, auth_1.verifyTokenWithRole)("admin"), dependencyInjection_1.adminController.getAllSessions);
router.get("/getSessionById/:sessionId", (0, auth_1.verifyTokenWithRole)("admin"), dependencyInjection_1.adminController.getSessionById);
router.post("/updateSession/:sessionId", (0, auth_1.verifyTokenWithRole)("admin"), dependencyInjection_1.adminController.updateSessionData);
router.post("/cancelSession/:id", (0, auth_1.verifyTokenWithRole)("admin"), dependencyInjection_1.adminController.cancelSession);
exports.default = router;

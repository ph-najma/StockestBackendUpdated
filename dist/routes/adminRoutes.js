"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = __importDefault(require("express"));
const auth_1 = require("../middleware/auth");
const adminController_1 = require("../controllers/adminController");
const adminService_1 = require("../services/adminService");
const userRepository_1 = require("../repositories/userRepository");
const limitRepository_1 = require("../repositories/limitRepository");
const stockRepository_1 = require("../repositories/stockRepository");
const orderRepository_1 = require("../repositories/orderRepository");
const transactionRepository_1 = require("../repositories/transactionRepository");
const promotionRepository_1 = require("../repositories/promotionRepository");
const sessionRepository_1 = require("../repositories/sessionRepository");
const orderModel_1 = __importDefault(require("../models/orderModel"));
const userRepository = new userRepository_1.UserRepository();
const LimitRepository = new limitRepository_1.limitRepository();
const orderRepository = new orderRepository_1.OrderRepository(orderModel_1.default);
const stockRepository = new stockRepository_1.StockRepository();
const promotionRepository = new promotionRepository_1.PromotionRepository();
const TransactionRepository = new transactionRepository_1.transactionRepository();
const SessionRepository = new sessionRepository_1.sessionRepository();
const adminController = new adminController_1.AdminController(new adminService_1.AdminService(userRepository, LimitRepository, orderRepository, stockRepository, TransactionRepository, promotionRepository, SessionRepository));
const router = express_1.default.Router();
router.post("/adminLogin", adminController.login);
router.get("/adminHome", (0, auth_1.verifyTokenWithRole)("admin"), adminController.getDashboardSummary);
router.get("/userList", (0, auth_1.verifyTokenWithRole)("admin"), adminController.getUserList);
router.post("/disableUser/:id", (0, auth_1.verifyTokenWithRole)("admin"), adminController.disableUser);
router.get("/stocklist", (0, auth_1.verifyTokenWithRole)("admin"), adminController.getStockList);
router.get("/orders", (0, auth_1.verifyTokenWithRole)("admin"), adminController.getAllOrders);
router.get("/limitorders", (0, auth_1.verifyTokenWithRole)("admin"), adminController.getLimitOrders);
router.get("/marketorders", (0, auth_1.verifyTokenWithRole)("admin"), adminController.getMarketOrders);
router.get("/matchedorders", adminController.getMatchedOrders);
router.get("/orderDetails/:orderId", (0, auth_1.verifyTokenWithRole)("admin"), adminController.getOrderDetails);
router.get("/allTransactions", (0, auth_1.verifyTokenWithRole)("admin"), adminController.getAllTransactions);
router.get("/userPortfolio/:userId", (0, auth_1.verifyTokenWithRole)("admin"), adminController.getUserPortfolio);
router.get("/getFees", (0, auth_1.verifyTokenWithRole)("admin"), adminController.getTotalFeesCollected);
router.post("/changeStatus/:orderId", (0, auth_1.verifyTokenWithRole)("admin"), adminController.cancelOrder);
router.post("/updateLimit", (0, auth_1.verifyTokenWithRole)("admin"), adminController.updateLimit);
router.post("/createSession", (0, auth_1.verifyTokenWithRole)("admin"), adminController.createSession);
router.post("/createPromotions", adminController.CreatePromotions);
router.get("/limit", (0, auth_1.verifyTokenWithRole)("admin"), adminController.getLimits);
router.get("/getSessions", (0, auth_1.verifyTokenWithRole)("admin"), adminController.getAllSessions);
router.get("/getSessionById/:sessionId", (0, auth_1.verifyTokenWithRole)("admin"), adminController.getSessionById);
router.post("/updateSession/:sessionId", (0, auth_1.verifyTokenWithRole)("admin"), adminController.updateSessionData);
router.post("/cancelSession/:id", (0, auth_1.verifyTokenWithRole)("admin"), adminController.cancelSession);
exports.default = router;
